{"version":3,"sources":["reportWebVitals.ts","components/top-nav.tsx","pages/index.tsx","components/temperature-chart.tsx","hooks/use-temperatures.ts","pages/dashboard.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TopNav","className","href","HomePage","getTick","unixTimestamp","date","Date","moment","format","TemperatureChart","props","location","LineChart","width","height","data","temperatureData","Line","type","dataKey","stroke","CartesianGrid","XAxis","domain","scale","tickFormatter","YAxis","Tooltip","endpoint","DashboardPage","requestStatus","tempResponse","useState","loading","response","setResponse","useEffect","a","fetch","json","error","toString","fetchTemperatures","useTemperature","charts","tempData","chart","push","ReactDOM","render","StrictMode","path","document","getElementById"],"mappings":"8JAceA,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iCCTP,SAASQ,IACd,OACE,qBAAKC,UAAU,8CAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,kBAIA,qBAAKD,UAAU,qBAAf,SACE,mBAAGA,UAAU,WAAWC,KAAK,aAA7B,8BCPH,SAASC,IACd,OACE,gCACE,cAACH,EAAD,IAEA,sBAAKC,UAAU,wBAAf,UACE,oBAAIA,UAAU,iBAAd,wBACA,uH,2ECOD,SAASG,EAAQC,GACtB,IAAMC,EAAO,IAAIC,KAAqB,IAAhBF,GACtB,OAAOG,IAAOF,GAAMG,OAAO,QAGtB,SAASC,EAAiBC,GAC/B,OACE,gCACE,oBAAIV,UAAU,OAAd,SAAsBU,EAAMC,WAE5B,eAACC,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKC,KAAML,EAAMM,gBAAhD,UACE,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWC,QAAQ,OAAOC,OAAO,YAC5C,cAACC,EAAA,EAAD,CAAeD,OAAO,SACtB,cAACE,EAAA,EAAD,CACEH,QAAQ,YACRD,KAAK,SACLK,OAAQ,CAAC,OAAQ,QACjBC,MAAM,OACNC,cAAetB,IAEjB,cAACuB,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,U,sCCtBFC,EAEA,kDCbC,SAASC,IAEd,IAGIC,EAHEC,EDcD,WACL,MAAgCC,mBAA8B,CAC5DC,SAAS,IADX,mBAAOC,EAAP,KAAiBC,EAAjB,KAwBA,OApBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,+EAE2BC,MAAMV,GAFjC,cAEUM,EAFV,gBAGuBA,EAASK,OAHhC,OAGUxB,EAHV,OAIIoB,EAAY,CACVF,SAAS,EACTlB,KAAMA,IANZ,kDASIoB,EAAY,CACVF,SAAS,EACTO,MAAO,KAAMC,aAXnB,2DADc,uBAAC,WAAD,wBAiBdC,KACC,IAEIR,ECvCcS,GAIjBZ,EAAaE,QACfH,EAAgB,0CACPC,EAAaS,QACtBV,EAAgB,8BAAMC,EAAaS,SAIrC,IAAII,EAAS,GACb,GAAIb,EAAahB,KACf,IAAK,IAAIJ,KAAYoB,EAAahB,KAAM,CACtC,IAAM8B,EAAWd,EAAahB,KAAKJ,GAC7BmC,EACJ,cAACrC,EAAD,CACEE,SAAUA,EACVK,gBAAiB6B,GACZlC,GAGTiC,EAAOG,KAAKD,GAIhB,OACE,gCACE,cAAC/C,EAAD,IACA,sBAAKC,UAAU,oBAAf,UACE,oBAAIA,UAAU,OAAd,uBACC8B,EACAc,QC7BTI,IAASC,OACP,cAAC,IAAMC,WAAP,UAKE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,aAAZ,SACE,cAACtB,EAAD,MAEF,cAAC,IAAD,CAAOsB,KAAK,IAAZ,SACE,cAACjD,EAAD,aAKRkD,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.f4346e34.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export function TopNav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Home\n        </a>\n\n        <div className=\"navbar-nav me-auto\">\n          <a className=\"nav-link\" href=\"/dashboard\">\n            Dashboard\n          </a>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import { TopNav } from \"../components/top-nav\";\n\nexport function HomePage() {\n  return (\n    <div>\n      <TopNav />\n\n      <div className=\"text-center my-5 py-5\">\n        <h1 className=\"display-3 mb-4\">Sample App</h1>\n        <div>\n          Sample app that shows how to use React and Bootstrap with a Flask API\n          backend.\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { TemperatureDataItem } from \"../hooks/use-temperatures\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\nimport moment from \"moment\";\n\nexport interface TemperatureChartProps {\n  location: string;\n  temperatureData: TemperatureDataItem[];\n}\n\nexport function getTick(unixTimestamp: number): string {\n  const date = new Date(unixTimestamp * 1000);\n  return moment(date).format(\"H:mm\");\n}\n\nexport function TemperatureChart(props: TemperatureChartProps) {\n  return (\n    <div>\n      <h2 className=\"my-5\">{props.location}</h2>\n\n      <LineChart width={600} height={300} data={props.temperatureData}>\n        <Line type=\"monotone\" dataKey=\"temp\" stroke=\"#8884d8\" />\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis\n          dataKey=\"timestamp\"\n          type=\"number\"\n          domain={[\"auto\", \"auto\"]}\n          scale=\"time\"\n          tickFormatter={getTick}\n        />\n        <YAxis />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport interface TemperatureResponse {\n  loading: boolean;\n  error?: string;\n  data?: {\n    [name: string]: TemperatureDataItem[];\n  };\n}\n\nexport interface TemperatureDataItem {\n  temp: string;\n  timestamp: number;\n}\n\nconst endpoint =\n  process.env.NODE_ENV === \"production\"\n    ? \"http://sample.jimamon.com:8000/api/temperatures\"\n    : \"http://127.0.0.1:5000/api/temperatures\";\n\nexport function useTemperature() {\n  const [response, setResponse] = useState<TemperatureResponse>({\n    loading: true,\n  });\n\n  useEffect(() => {\n    async function fetchTemperatures() {\n      try {\n        const response = await fetch(endpoint);\n        const data = await response.json();\n        setResponse({\n          loading: false,\n          data: data,\n        });\n      } catch (error) {\n        setResponse({\n          loading: false,\n          error: error.toString(),\n        });\n      }\n    }\n\n    fetchTemperatures();\n  }, []);\n\n  return response;\n}\n","import { TopNav } from \"../components/top-nav\";\nimport { TemperatureChart } from \"../components/temperature-chart\";\nimport { useTemperature } from \"../hooks/use-temperatures\";\n\nexport function DashboardPage() {\n  // Fetch temperatures from the API.\n  const tempResponse = useTemperature();\n\n  // Prep a div that contains whether we're still waiting for a response, or the request failed.\n  let requestStatus;\n  if (tempResponse.loading) {\n    requestStatus = <div>loading</div>;\n  } else if (tempResponse.error) {\n    requestStatus = <div>{tempResponse.error}</div>;\n  }\n\n  // Create the charts from the response data.\n  let charts = [];\n  if (tempResponse.data) {\n    for (let location in tempResponse.data) {\n      const tempData = tempResponse.data[location];\n      const chart = (\n        <TemperatureChart\n          location={location}\n          temperatureData={tempData}\n          key={location}\n        />\n      );\n      charts.push(chart);\n    }\n  }\n\n  return (\n    <div>\n      <TopNav />\n      <div className=\"container-sm mt-5\">\n        <h1 className=\"mb-5\">Dashboard</h1>\n        {requestStatus}\n        {charts}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { HomePage } from \"./pages/index\";\nimport { DashboardPage } from \"./pages/dashboard\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {\n      // Use React-Router to map routes to page components.\n      // https://reactrouter.com/web/guides/quick-start\n    }\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/dashboard\">\n          <DashboardPage />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}